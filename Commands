//This class creates methods to govern the basic movements of the robot.
//The robot moves on a Cartesian plane with origin (1,1) and turns at 90Ëš angles.
//Created 02/08/2016 by Trevor B. (PPCG user Eridan)

import kareltherobot.Robot;

public class Commands extends Robot {
	private int xCoordinate;
	private int yCoordinate;
	private Direction currentDirection;
	private int beeperCount;
	
	public Commands(int street, int avenue, Direction direction, int beepers) {
		super(street, avenue, direction, beepers);
		
		xCoordinate = avenue;
		yCoordinate = street;
		currentDirection = direction;
		beeperCount = beepers;
	}
	
	//MOVEMENT
	
	public void move(int steps) {
		for(int i = 0; i < steps; i++) {
			super.move();
		}
		
		if(facingNorth()) {
			yCoordinate += steps;
		}
		else if(facingSouth()) {
			yCoordinate -= steps;
		}
		else if(facingEast()) {
			xCoordinate += steps;
		}
		else if(facingWest()) {
			xCoordinate -= steps;
		}
	}
	
	public void move() {
		move(1);
	}
	
	public void turnLeft(int leftTurns) {
		for(int i = 0; i < leftTurns; i++) {
			super.turnLeft();
		}
	}
	
	public void turnLeft() {
		turnLeft(1);
	}
	
	public void turnRight() {
		turnLeft(3);
	}
	
	public void turnAround() {
		turnLeft(2);
	}
	
	//DIRECTIONS
	
	public void faceNorth() {
		while(!facingNorth()) {
			turnLeft();
		}
		currentDirection = North;
	}
	
	public void faceSouth() {
		while(!facingSouth()) {
			turnLeft();
		}
		currentDirection = South;
	}
	
	public void faceEast() {
		while(!facingEast()) {
			turnLeft();
		}
		currentDirection = East;
	}
	
	public void faceWest() {
		while(!facingWest()) {
			turnLeft();
		}
		currentDirection = West;
	}
	
	//COORDINATE CHANGE
	
	public void coordinateChange(int xDestination, int yDestination) {
		int xDifference = xDestination - xCoordinate;
		int yDifference = yDestination - yCoordinate;
		
		if(xDifference > 0) {
			faceEast();
		}
		else if(xDifference < 0) {
			faceWest();
		}
		move(xDifference);
		
		if(yDifference > 0) {
			faceNorth();
		}
		else if(yDifference > 0) {
			faceSouth();
		}
		move(yDifference);
	}
	
	//BEEPER MANAGEMENT
	
	public void putBeeper(int drops) {
		for(int i = 0; i < drops; i++) {
			super.putBeeper();
		}
		beeperCount -= drops;
	}
	
	public void putBeeper() {
		putBeeper(1);
	}
	
	public void pickBeeper(int picks) {
		for(int i = 0; i < picks; i++) {
			super.pickBeeper();
		}
		beeperCount += picks;
	}
	
	public void pickBeeper() {
		pickBeeper(1);
	}
	
	public void putAllBeepers() {
		while(anyBeepersInBeeperBag()) {
			putBeeper();
		}
	}
	
	public void pickAllBeepers() {
		while(nextToABeeper()) {
			pickBeeper();
		}
	}
}
